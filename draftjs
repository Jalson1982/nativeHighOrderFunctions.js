import React from "react";
import HocResources from "../hoc/hoc-resources";
import { Col, Row, Button, Modal, ModalBody, ModalHeader, ModalFooter } from "mdbreact";
import { connect } from "react-redux";
import Editor from 'draft-js-plugins-editor';
import createHashtagPlugin from 'draft-js-hashtag-plugin';
import createToolbarPlugin, { Separator } from 'draft-js-static-toolbar-plugin';
import hashtagStyles from './hashtagStyles.css';
import { stateToHTML } from 'draft-js-export-html';
import {
    ItalicButton,
    BoldButton,
    UnderlineButton,
    CodeButton,
    HeadlineOneButton,
    HeadlineTwoButton,
    HeadlineThreeButton,
    UnorderedListButton,
    OrderedListButton,
    BlockquoteButton,
    CodeBlockButton,
} from 'draft-js-buttons';
import 'draft-js-static-toolbar-plugin/lib/plugin.css';
import 'draft-js-sticker-plugin/lib/plugin.css';
import {Immutable, EditorState, Entity, Modifier, CompositeDecorator, convertToRaw, convertFromRaw, htmlToState } from 'draft-js';
import { setNewTemplate } from "../actions/templateActions";
import { addNewTemplateModal } from "../actions/modalActions";
import { fromJS } from 'immutable';
import 'draft-js-hashtag-plugin/lib/plugin.css'; 
import { OrderedSet } from 'immutable'

const toolbarPlugin = createToolbarPlugin({
    structure: [
        BoldButton,
        ItalicButton,
        UnderlineButton,
        HeadlineOneButton,
        HeadlineTwoButton,
        HeadlineThreeButton,
        CodeButton,
        Separator,
        UnorderedListButton,
        OrderedListButton,
        BlockquoteButton,
        CodeBlockButton
    ]
});


const { Toolbar } = toolbarPlugin;
const hashtagPlugin = createHashtagPlugin();
const plugins = [toolbarPlugin,hashtagPlugin];

const Placeholder = props => (
    <div className="mysp" contentEditable={false} readOnly data-offset-key={props.offsetkey}>
        {props.children}
    </div>
);



const customDecorators = [{
    strategy: findPlaceholders,
    component: Placeholder,
}];

function findPlaceholders(contentBlock, callback) {
    contentBlock.findEntityRanges((character) => {
        const entityKey = character.getEntity();
        return (
            entityKey !== null &&
            Entity.get(entityKey).getType() === 'PLACEHOLDER'
        );
    }, callback);
}


const styleMap = {
    'highlight': {
     
    },
  };
  const blockRenderMap = Immutable.Map({
    'header-two': {
      element: 'h2'
    },
    'unstyled': {
      element: 'h2'
    }
  });

class TemplateDetailsForm extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            index: 0,
            editorState: EditorState.createEmpty(),
            templateData: {},
        }
    }

    onChange = (editorState) => {
        const longTxt = JSON.stringify(convertToRaw(this.state.editorState.getCurrentContent()));
        this.setState({
            editorState,
            templateData: {
                ...this.state.templateData,
                longtext: longTxt
            }
        });
    };

    getInputValue = (e) => {
        this.setState({
            templateData: {
                ...this.state.templateData,
                [e.target.name]: e.target.value,

            }
        })
    }

    setDataToDatabase = () => {
        this.props.setNewTemplate(this.state.templateData)
    }

    insertPlaceholder = (label, meta) => {
        const editorState = this.state.editorState;
        const currentContent = editorState.getCurrentContent();
        const selection = editorState.getSelection();
        const entityKey = Entity.create('PLACEHOLDER', 'IMMUTABLE', { meta });
        const textWithEntity = Modifier.insertText(currentContent, selection, label, OrderedSet.of('highlight'), entityKey);
        this.setState({
            editorState: EditorState.push(editorState, textWithEntity, 'insert-characters')

        });
    }

    render() {
        console.log(this.state)
        return (
            <div>
                <Modal isOpen={this.props.modalControls.templateModal} size="lg">
                    <ModalHeader className="modalHeader" toggle={this.toggle}>
                        {this.props.getResource("addNewClient")}
                    </ModalHeader>
                    <ModalBody className="add-client-form">
                        <Row>
                            <Col md="4">
                                <label for="exampleForm2">Template Name</label>
                                <input
                                    type="text"
                                    id="exampleForm2"
                                    name="heading"
                                    className="template-heading"
                                    onChange={this.getInputValue}
                                />
                            </Col>
                        </Row>
                        <Row>
                            <Col md="12">
                                <div class="form-group">
                                    <label for="exampleFormControlTextarea1">Description</label>
                                    <textarea class="form-control rounded-0 template-description " id="exampleFormControlTextarea1" rows="2" name="description" onChange={this.getInputValue}></textarea>
                                </div>

                            </Col>
                        </Row>
                        <label for="exampleFormControlTextarea1">Template body</label>
                        <button className="btn btn-success insertBtn" onClick={() => this.insertPlaceholder("Hello")}>Insert data</button>
                        <Toolbar />
                        <Editor
                            editorState={this.state.editorState}
                            toolbarClassName="toolbarClassName"
                            wrapperClassName="wrapperClassName"
                            editorClassName="editorClassName"
                            decorators = {customDecorators}
                            customStyleMap={styleMap}
                            onChange={this.onChange}
                            blockRenderMap={blockRenderMap}
                            plugins={plugins}
                        />
                     
                        <Row>
                            <Col md="4">
                                <label for="exampleForm2">Doctor Name</label>
                                <input
                                    type="text"
                                    name="email"
                                />
                            </Col>
                            <Col md="4">
                                <label for="exampleForm2">Shortcut</label>
                                <input
                                    type="text"
                                    name="shortcut"
                                    onChange={this.getInputValue}
                                />
                            </Col>
                            <Col md="4">
                                <label for="exampleForm2">Tpl Status</label>
                                <select className=" myselect">
                                    <option>{this.props.getResource("showAllClientsText")}</option>
                                    <option>{this.props.getResource("clientStatusActiveText")}</option>
                                    <option>{this.props.getResource("clientStatusInactiveText")}</option>
                                </select>
                            </Col>
                        </Row>
                    </ModalBody>
                    <ModalFooter className="footerModalAdd">
                        <Button className="default" onClick={this.toggle}>
                            {this.props.getResource("closeBtnText")}
                        </Button>
                        <Button color="success" onClick={this.setDataToDatabase}>
                            {this.props.getResource("addClientBtn")}
                        </Button>
                    </ModalFooter>
                </Modal>
            </div>
        )
    }
}


const mapStateToProps = state => ({
    modalControls: state.modalControls
});
export default connect(mapStateToProps, { addNewTemplateModal, setNewTemplate })(HocResources(TemplateDetailsForm));
